<?php

/**
 * @file
 * Plug N Pay Smart Screens v2 Specifications integration for Drupal 7 UberCart.
 */




/**
 * Implements hook_menu().
 */
function uc_plugnpay_menu() {
  $items = array();

  $items['cart/plugnpay/return'] = array(
    'title' => 'Order Complete',
    'page callback' => 'uc_plugnpay_return_callback',
    'access callback' => 'uc_plugnpay_completion_access',
    'type' => MENU_CALLBACK,
    'file' => 'uc_plugnpay.pages.inc'
  );


  return $items;
}

/**
 * Make sure anyone can complete their plugnpay orders.
 */
function uc_plugnpay_completion_access() {
  // All user have access to finish the payment.
  return TRUE;
}


/**
 * Registers callbacks for payment methods.
 *
 * Payment methods are different ways to collect payment. By default, Ubercart
 * comes with support for check, credit card, and generic payments. Payment
 * methods show up at checkout or on the order administration screens, and they
 * collect different sorts of information from the user that is used to process
 * or track the payment.
 *
 * @see hook_uc_payment_method_callback()
 *
 * @return
 *   An array of payment methods. The array contains a sub-array for each
 *   payment method, with the machine-readable type name as the key. Required
 *   attributes:
 *   - "name": the human-readable name of the payment method.
 *   - "title": the human-readable title of the payment method, displayed
 *     during checkout.
 *   - "desc": a human-readable description of the payment method.
 *   - "callback": a callback function that handles operations that the method
 *     may need to perform. See hook_uc_payment_method_callback()
 *   - "weight": the default weight of the payment method.
 *   - "checkout": if TRUE, the payment method will be enabled by default.
 *   - "no_gateway": should be set to TRUE, except for uc_credit which uses
 *     payment gateways.
 *   - "redirect": if set, this payment method redirects off site; this key
 *     specifies a callback function which will be used to generate the form
 *     that redirects the user to the payment gateway pages.
 */
function uc_plugnpay_uc_payment_method() {
  $path = base_path() . drupal_get_path('module', 'uc_plugnpay') . "/images/plugnpay_logo.png";

  $title = theme('image', array(
    'path' => $path,
    'alt' => t('plugnpay Gateway'),
    'title' => t('plugnpay Gateway'),
    'attributes' => array (
      'style' => 'margin-bottom: 0px; position: relative; top: 0px;'
    ),
  ));

  $methods[]= array(
    'id' => 'plugnpay',
    'name' => t(' PlugNPay'),
    'title' => $title,
    'desc' => t('Redirect to plugnpay to pay by credit card.'),
    'callback' => 'uc_payment_method_plugnpay',
    'redirect' => 'uc_plugnpay_submission_form',
    'weight' => 4,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}


/**
 * Callback function to perform various operations for a payment method.
 *
 * Possible operations are as follows:
 * - "cart-details": The payment method has been selected at checkout. Return
 *   a form or render array to be displayed in the payment method pane.
 * - "cart-process": Called when the user submits the checkout form with this
 *   payment method selected, used to process any form elements output by the
 *   'cart-details' op. Return FALSE to abort the checkout process, or NULL or
 *   TRUE to continue with checkout.
 * - "cart-review": Called when the checkout review page is being displayed.
 *   Return an array of data to be displayed below the payment method title on
 *   the checkout review page.
 * - "customer-view": Called when the order is being displayed to a customer.
 *   Return a render array to be displayed to customers.
 * - "order-delete": Called when an order is being deleted. Payment methods
 *   should clean up any extra data they stored related to the order.
 * - "order-details": Called when an order is being edited by an administrator.
 *   Return a string or a form array to be displayed to the administator.
 * - "order-load": Called from hook_uc_order('load') when this payment method
 *   is selected for the order.
 * - "order-process": Called when an order has been edited by an administrator.
 *   Process any form elements returned by the "order-details" op.
 * - "order-save": Called from hook_uc_order('save') when this payment method
 *   is selected for the order.
 * - "order-submit": Called from hook_uc_order('submit') when this payment
 *   method is selected for the order.
 * - "order-view": Called when the order is being displayed on the order admin
 *   pages. Return a render array to be displayed to administrators.
 * - "settings": Called when the payment methods page is being displayed.
 *   Return a system settings form array to configure the payment method.
 *
 * @see hook_uc_payment_method()
 *
 * @param $op
 *   The operation being performed.
 * @param &$order
 *   The order object that relates to this operation.
 * @param $form
 *   Where applicable, the form object that relates to this operation.
 * @param &$form_state
 *   Where applicable, the form state that relates to this operation.
 *
 * @return
 *   Dependent on $op.
 */

function uc_payment_method_plugnpay($op, &$order, $form = NULL, &$form_state = NULL) {
  switch($op) {
    case 'settings':
      _uc_payment_method_plugnpay_settings($form);
      return $form;

    case 'cart-review':
        $review[] = array(
          'title' => t('Payment Gateway'), 
          'data' => ' PlugNPay'
        );
        
        return $review;

    case 'cart-details':
        return array(
          '#markup' => t('Review order to complete payment.')
        );
    

    default:
        break;
  }
}

/**
 * Settings form for plugnpay Payment 
 */
function _uc_payment_method_plugnpay_settings(&$form) {
  $form['uc_plugnpay_username'] = array(
    '#type' => 'textfield',
    '#title' => t('User Account'),
    '#description' => t('Username for plugnpay account.'),
    '#default_value' => variable_get('uc_plugnpay_username', ''),
    '#required' => TRUE,
  );      

  $form['uc_plugnpay_gateway'] = array(
    '#type' => 'textfield',
    '#title' => t('Gateway URL'),
    '#description' => t('Password for order verification.'),
    '#default_value' => variable_get('uc_plugnpay_gateway', 'https://pay1.plugnpay.com/pay/' ),
    '#required' => TRUE,
  );

  $form['uc_plugnpay_type'] = array(
      '#type' => 'select',
      '#title' => t('Plugnpay Mode'),
      '#description' => t('Select the type of transactions.'),
      '#options' => array (
        'auth' => t('Static'),
        'debug' => t('Itemized'),
        'test' => t('Test')
      ),
      '#default_value' => variable_get('uc_plugnpay_mode', 'test'),
  );

  $form['uc_plugnpay_currency'] = array(
    '#type' => 'select',
    '#title' => t('Payment Currency'),
    '#description' => t('Select the currency you wish to use for transactions.'),
    '#options' => array (
      'BBD' => t('BBD'),
      'USD' => t('USD'),
      'EURO' => t('EUR'),
      'GBP' => t('GBP'),
      'XCD' => t('XCD'),
    ),
    '#default_value' => variable_get('uc_plugnpay_currency', 'BBD'),
  );

  $form['uc_plugnpay_inbound_hash'] = array(
      '#type' => 'textfield',
      '#title' => t('Inbound Hash'),
      '#description' => t('Generate an onbound hash from your PlugNPay Account.'),
      '#default_value' => variable_get('uc_plugnpay_inbound_hash', t('')),
  );

  $form['uc_plugnpay_outbound_hash'] = array(
    '#type' => 'textfield',
    '#title' => t('Outbound Hash'),
    '#description' => t('Generate an outbound hash from your PlugNPay Account.'),
    '#default_value' => variable_get('uc_plugnpay_outbound_hash', t('')),
  );
}


/**
 * Form Builder.
 *
 * The payment form which will be submitted to the gateway.
 */
function uc_plugnpay_submission_form ($form, $form_state, $order) {

  // Retrieve necessary variables from settings.
  $username = variable_get('uc_plugnpay_username', '');
  $gateway_url = variable_get('uc_plugnpay_gateway', '');
  $mode = variable_get('uc_plugnpay_mode', '');
  $currency = variable_get('uc_plugnpay_currency', 'USD');
 
  // Order data required for PlugNPay submission.
  $amount = uc_currency_format($order->order_total, FALSE, FALSE, '.');
  $invoice_id = $order->order_id;

  $form_state['redirectUrl'] = array(
    '#type' => 'hidden',
    '#value' => url('cart/plugnpay/return', ['absolute' => TRUE, 'http' => TRUE]),
  );
 
  // Create the form array that will auto-submit to PlugNPay.
  $form = array(
   '#action' => $gateway_url,
   '#method' => 'POST',
   '#attributes' => array('id' => 'uc-plugnpay-checkout-form'),
  );

  // Build data array of Hidden form elements to pass order data to PlugNPay.
  $data = array(
    'pt_gateway_account' => $username,
    'mode' => $mode,
    'pt_transaction_amount' => $amount,
    'pt_currency' => $currency,
    'pt_order_id' => $invoice_id,
    'pt_payment_name' => 'cardtest', // test payment data
    'pt_card_number' => '4111111111111111', // test payment data
    'pt_card_expiration_month' => '08', // test payment data
    'pt_card_expiration_year' => '27', // test payment data
    'pt_card_type' => 'Visa', // test payment data
    'pt_card_security_code' => 123, // test payment data
    'card-amount' => 1005.23, // test payment data
    // customer info 
    'pt_billing_email_address' => $order->primary_email, 
    'pt_payment_first_name' => $order->billing_first_name, 
    'pt_payment_last_name' => $order->billing_last_name, 
    'pt_billing_company' => $order->billing_company, 
    'pt_billing_address_1' => $order->billing_street1, 
    'pt_billing_address_2' => $order->billing_street2, 
    'pt_billing_city' => $order->billing_city, 
    'pt_billing_state' => $order->billing_zone, 
    'pt_billing_postal_code' => $order->billing_postal_code, 
    'pt_billing_country' => 'BB', 
    'pt_billing_phone_number' => $order->billing_phone, 
  );

  // Build redirect form from array
  foreach ($data as $key => $value) {
    $form[$key] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }

  // Add a submit button to the form.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed'),
  );
 
   return $form;

}

/**
 * Form Builder.
 *
 * The payment test form which will be submitted to the gateway.
 */
function uc_plugnpay_test_form ($form, $form_state, $order) {
  // What is this form used for?

  // Retrieve necessary variables from settings.
  $username = variable_get('uc_plugnpay_username', '');

  // Create the form array that will auto-submit to PlugNPay.
  $form = array(
    '#action' => 'https://pay1.plugnpay.com/payment/pnpremote.cgi',
    '#method' => 'POST',
    '#attributes' => array('id' => 'uc-plugnpay-checkout-form'),
  );

  // Build data array of the test form
  $data = array(
    'publisher-name' => 'pnpdemo',
    #'publisher-email' => 'lee@caribbeanewmedia.com',
    'mode' => 'auth',
    'card-name' => 'cardtest',
    'card-number' => '4111111111111111',
    'card-exp' => '1227',
    'card-type' => 'Visa',
    'card-cvv' => 123,
    'card-amount' => 10.23,
  );

  foreach ($data as $key => $value) {
    $form[$key] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }
  
  // Add a submit button to the form.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed'),
  );
 
  return $form;
}


/*
  FinalStatus	success/badcard/problem/fraud
      success - Transaction was successful
      badcard - Transaction failed due to decline from processor
      problem - Transaction failed due to problem unrelated to credit card.
      fraud - Transaction failed due to failure of FraudTrack2 filter settings.
*/

// $hash_string = $username . $password . $invoice_id . $amount . $currency;  // Modify based on PlugNPay requirements.
// $outbound_hash = hash('sha256', $hash_string);
// $form['hash'] = array(
//   '#type' => 'hidden',
//   '#value' => $outbound_hash,
// );


 
/**
 * pb_response_message_type	Optional	behavior	string	json,querystring,xml	Format of response message.
 * pb_response_parse_type	Optional	behavior	string	json,querystring,xml,meta,none	Response Parse Type
 * pb_response_url	Optional	behavior	string	i.e. http://www.yourdomain.com/response.html	Maps URL for success_link, badcard_link, and problem_link
 * pb_bad_card_url	Optional	behavior	string	i.e. http://www.yourdomain.com/badcard.html	Fully qualified URL to call after a failed card response is received from the credit card processor.  If URL is a script, method will be via a POST.  If the URL is a web page, method will be by a GET.
 * pb_problem_url	Optional	behavior	string	i.e. http://www.yourdomain.com/problem.html	Fully qualified URL to call after either no response or an error message is received from the credit card processor.  If URL is a script, method will be via a POST. If the URL is a web page, method will be by a GET.
 * pb_success_url	Optional	behavior	string	i.e. http://www.yourdomain.com/thankyou.html	Fully qualified URL to call after a successful authorization of the credit card is received from the credit card processor.  If URL is a script, method will be via a POST. If the URL is a web page, method will be by a GET.
 * pb_transition_type	Optional	behavior	string	get,post,hidden	Supersedes the Transition Page settings within Account Settings.
 * - 'get' forces Transaction Page w/GET form method
 * - 'post' forces Transaction Page w/POST form method
 * - 'hidden' uses our server's hidden POST method w/o showing a Transition Page.
 * pb_transition_template	Optional	behavior	sting	i.e. deftran	Used to specify name of custom transition template to use, when 'pb_transition_type' is set to 'get' or 'post'.
 * pb_ignore_fraud_response	Optional	behavior	string	yes	If passed with a value of 'yes', enabled bypass of AVS and Fraud screening.
 * pb_ignore_security_code_response	Optional	behavior	string	yes,no	If passed with a value of 'yes', enabled bypass CVV Fraud screening.
 */

 