<?php

/**
 * @file
 * Plug N Pay Smart Screens v2 Specifications integration for Drupal 7 UberCart.
 */

/**
 * Make sure anyone can complete their plugnpay orders.
 */
function uc_plugnpay_completion_access() {
  // All user have access to finish the payment.
  return TRUE;
}


/**
 * Implements hook_menu().
 */
function uc_plugnpay_menu() {
  $items = array();

  $items['cart/plugnpay/complete'] = array(
    'title' => 'Order Complete',
    'page callback' => 'uc_plugnpay_complete',
    'access callback' => 'uc_plugnpay_completion_access',
    'type' => MENU_CALLBACK,
    'file' => 'uc_plugnpay.pages.inc'
  );

  $items['cart/plugnpay/success'] = array(
    'title' => 'Order Complete',
    'page callback' => 'uc_plugnpay_success',
    'access callback' => 'uc_plugnpay_completion_access',
    'type' => MENU_CALLBACK,
    'file' => 'uc_plugnpay.pages.inc'
  );

  $items['cart/plugnpay/badcard'] = array(
    'title' => 'Order Complete',
    'page callback' => 'uc_plugnpay_badcard',
    'access callback' => 'uc_plugnpay_completion_access',
    'type' => MENU_CALLBACK,
    'file' => 'uc_plugnpay.pages.inc'
  );

  $items['cart/plugnpay/fraud'] = array(
    'title' => 'Order Complete',
    'page callback' => 'uc_plugnpay_fraud',
    'access callback' => 'uc_plugnpay_completion_access',
    'type' => MENU_CALLBACK,
    'file' => 'uc_plugnpay.pages.inc'
  );

  $items['cart/plugnpay/problem'] = array(
    'title' => 'Order Complete',
    'page callback' => 'uc_plugnpay_problem',
    'access callback' => 'uc_plugnpay_completion_access',
    'type' => MENU_CALLBACK,
    'file' => 'uc_plugnpay.pages.inc'
  );


  return $items;
}


/**
 * Registers callbacks for payment methods.
 *
 * Payment methods are different ways to collect payment. By default, Ubercart
 * comes with support for check, credit card, and generic payments. Payment
 * methods show up at checkout or on the order administration screens, and they
 * collect different sorts of information from the user that is used to process
 * or track the payment.
 *
 * @see hook_uc_payment_method_callback()
 *
 * @return
 *   An array of payment methods. The array contains a sub-array for each
 *   payment method, with the machine-readable type name as the key. Required
 *   attributes:
 *   - "name": the human-readable name of the payment method.
 *   - "title": the human-readable title of the payment method, displayed
 *     during checkout.
 *   - "desc": a human-readable description of the payment method.
 *   - "callback": a callback function that handles operations that the method
 *     may need to perform. See hook_uc_payment_method_callback()
 *   - "weight": the default weight of the payment method.
 *   - "checkout": if TRUE, the payment method will be enabled by default.
 *   - "no_gateway": should be set to TRUE, except for uc_credit which uses
 *     payment gateways.
 *   - "redirect": if set, this payment method redirects off site; this key
 *     specifies a callback function which will be used to generate the form
 *     that redirects the user to the payment gateway pages.
 */
function uc_plugnpay_uc_payment_method() {
  $path = base_path() . drupal_get_path('module', 'uc_plugnpay') . "/images/plugnpay_logo.png";

  $title = theme('image', array(
    'path' => $path,
    'alt' => t('plugnpay Gateway'),
    'title' => t('plugnpay Gateway'),
    'attributes' => array (
      'style' => 'margin-bottom: 0px; position: relative; top: 0px;'
    ),
  ));

  $methods[]= array(
    'id' => 'plugnpay',
    'name' => t('PlugNPay'),
    'title' => $title,
    'desc' => t('Redirect to plugnpay to pay by credit card.'),
    'callback' => 'uc_payment_method_plugnpay',
    'redirect' => 'uc_plugnpay_submission_form',
    'weight' => 4,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

//     'redirect' => 'uc_plugnpay_submission_form',

/**
 * Callback function to perform various operations for a payment method.
 *
 * Possible operations are as follows:
 * - "cart-details": The payment method has been selected at checkout. Return
 *   a form or render array to be displayed in the payment method pane.
 * - "cart-process": Called when the user submits the checkout form with this
 *   payment method selected, used to process any form elements output by the
 *   'cart-details' op. Return FALSE to abort the checkout process, or NULL or
 *   TRUE to continue with checkout.
 * - "cart-review": Called when the checkout review page is being displayed.
 *   Return an array of data to be displayed below the payment method title on
 *   the checkout review page.
 * - "customer-view": Called when the order is being displayed to a customer.
 *   Return a render array to be displayed to customers.
 * - "order-delete": Called when an order is being deleted. Payment methods
 *   should clean up any extra data they stored related to the order.
 * - "order-details": Called when an order is being edited by an administrator.
 *   Return a string or a form array to be displayed to the administator.
 * - "order-load": Called from hook_uc_order('load') when this payment method
 *   is selected for the order.
 * - "order-process": Called when an order has been edited by an administrator.
 *   Process any form elements returned by the "order-details" op.
 * - "order-save": Called from hook_uc_order('save') when this payment method
 *   is selected for the order.
 * - "order-submit": Called from hook_uc_order('submit') when this payment
 *   method is selected for the order.
 * - "order-view": Called when the order is being displayed on the order admin
 *   pages. Return a render array to be displayed to administrators.
 * - "settings": Called when the payment methods page is being displayed.
 *   Return a system settings form array to configure the payment method.
 *
 * @see hook_uc_payment_method()
 *
 * @param $op
 *   The operation being performed.
 * @param &$order
 *   The order object that relates to this operation.
 * @param $form
 *   Where applicable, the form object that relates to this operation.
 * @param &$form_state
 *   Where applicable, the form state that relates to this operation.
 *
 * @return
 *   Dependent on $op.
 */

function uc_payment_method_plugnpay($op, &$order, $form = NULL, &$form_state = NULL) {
  switch($op) {
    case 'settings':
      _uc_payment_method_plugnpay_settings($form);
      return $form;

    case 'cart-review':
        $review[] = array(
          'title' => t('Payment Gateway'), 
          'data' => 'plugnpay'
        );
        
        return $review;

    case 'cart-details':
        return array(
          '#markup' => t('Continue with checkout to complete payment.')
        );
    

    default:
        print_r('default');
        break;
  }
}

/**
 * Settings form for plugnpay Payment 
 */
function _uc_payment_method_plugnpay_settings(&$form) {
  $form['uc_plugnpay_username'] = array(
    '#type' => 'textfield',
    '#title' => t('User Account'),
    '#description' => t('Username for plugnpay account.'),
    '#default_value' => variable_get('uc_plugnpay_username', ''),
    '#required' => TRUE,
  );

  $form['uc_plugnpay_password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#description' => t('Password for plugnpay account.'),
    '#default_value' => variable_get('uc_plugnpay_password', ''),
    '#required' => TRUE,
  );        

  $form['uc_plugnpay_server'] = array(
    '#type' => 'textfield',
    '#title' => t('Gateway URL'),
    '#description' => t('Password for order verification.'),
    '#default_value' => variable_get('uc_plugnpay_server', 'https://pay1.plugnpay.com/pay/' ),
    '#required' => TRUE,
  );

  $form['uc_plugnpay_mode'] = array(
      '#type' => 'textfield',
      '#title' => t('plugnpay Mode'),
      '#description' => t('plugnpay Mode'),
      '#options' => array (
        'auth' => t('Static'),
        'debug' => t('Itemized'),
        'test' => t('test')
      ),
      '#default_value' => variable_get('uc_plugnpay_mode', 'test'),
      '#required' => TRUE,
  );

  $form['uc_plugnpay_currency'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment Currency'),
    '#description' => t('Payment curreny'),
    '#options' => array (
      'BBD' => t('$BBD'),
      'USD' => t('$USD')
    ),
    '#default_value' => variable_get('uc_plugnpay_currency', 'BBD'),
    '#required' => TRUE,
  );

  $form['uc_plugnpay_inbound_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Inbound Key'),
      '#default_value' => variable_get('uc_plugnpay_inbound_key', t('')),
  );

  $form['uc_plugnpay_outbound_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Outbound Key'),
    '#default_value' => variable_get('uc_plugnpay_outbound_key', t('')),
  );
}


/**
 * Form Builder.
 *
 * The payment form which will be submitted to the gateway.
 */
function uc_plugnpay_submission_form ($form, $form_state, $order) {


  return $form;

}
 